#!/usr/bin/env bash
set -e

SNAP_ROOT=$(gsettings get org.therepoclub.btrfs-snapshots.preferences root | sed s/\'//g)
SNAP_PACMAN=$(gsettings get org.therepoclub.btrfs-snapshots.preferences pacman | sed s/\'//g)

## Script metadata
SCRIPTNAME=${0##*/}
VERSION="2021.09.19"
DESCRIPTION="A bach BTRFS Sanpshot wrapper"
AUTHOR="The-Repo-Club <wayne6324@gmail.com>"

## Set Colors (copied from makepkg)
ALL_OFF="\e[1;0m"
RED="\e[1;31m"
GREEN="\e[1;32m"
YELLOW="\e[1;33m"
BLUE="\e[1;34m"
PURPLE="\e[1:35m"
CYAN="\e[1:36m"

readonly ALL_OFF RED GREEN YELLOW BLUE PURPLE CYAN

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
error() {
    local mesg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF}${BOLD} %s${ALL_OFF}\n" "$mesg" "$@" >&2
}

#=== FUNCTION =================================================================
#        Name: main
# Description: The main function if nothing is passed
#==============================================================================

main() {
    #number of snapshots allowed
    sn=$SNAP_ROOT

    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root\n" "$SCRIPTNAME"
        exit
    fi

    #root subvolume device
    hsvdvl=1
    while IFS= read -r Line; do
	    if [ -n "$hsvdvl" ]; then
		    unset hsvdvl; continue
	    fi
	    set -- $Line
	    [ "$2" = 'btrfs' ] && [ "${7}" = '/' ] && hsvdv="$1"
    done <<< $( df -Th )

    #current date
    cdt=`date +"%F-%H-%M-%S"`

    #root subvolume
    while IFS= read -r Line; do
	    set -- $Line
	    [ "$7" = '5' ] && [ "$9" = '@' ] && hsv="${@: -1}"
    done <<< $( btrfs subvolume list / )

    #snapshot subvolume
    while IFS= read -r Line; do
	    set -- $Line
	    [ "$7" = '5' ] && [ "$9" = '@snapshots' ] && ssv="${@: -1}"
    done <<< $( btrfs subvolume list / )

    #number of root snapshots
    hsl=0
    while IFS= read -r Line; do
	    LastColumn=${Line##* }
	    [ "${LastColumn:0:16}" = '@snapshots/@root' ] && [ "${LastColumn:16:7}" != '-pacman' ] && hsl=$((hsl+1))
    done <<< $( btrfs subvolume list / )

    #oldest root snapshot
    while IFS= read -r Line; do
	    LastColumn=${Line##* }
	    [ "${LastColumn:0:16}" = '@snapshots/@root' ] && [ "${LastColumn:16:7}" != '-pacman' ] && ohs="$LastColumn" && break
    done <<< $( btrfs subvolume list / )

    #Mount root subvolume to /mnt/750GB/.snapshots
    mnt='/mnt/750GB/.snapshots'

    if [ -e "$hsvdv" ]; then
        if [ -d "$mnt" ]; then
            printf "${YELLOW}Mounted $hsvdv to $mnt${ALL_OFF}\n"
        else
            printf "${RED}No btrfs drives found${ALL_OFF}\n"
            exit 1
        fi
    else
        printf "${RED}No btrfs drives found${ALL_OFF}\n"
        exit 1
    fi

    #MUST be in /mnt to perform task
    cd $mnt

    # Check root subvolume exists...
    if [ -e "$hsv" ]; then
        printf "${GREEN}Found root subvolume... $hsv${ALL_OFF}\n"
    else
        printf "${RED}No root subvolume found... exiting${ALL_OFF}\n"
        exit 1
    fi

    # check snapshot subvolume exists...
    if [ -e "$ssv" ]; then
        printf "${GREEN}Found snapshot suvolume... $ssv${ALL_OFF}\n"
    else
        printf "${RED}No snapshot subvolume found${ALL_OFF}\n"

        exit 1
    fi

    #Make snapshot and place in snapshot directory
    btrfs subvolume snapshot $hsv $ssv/@root-$cdt

    #remove a root snapshot if there are more than 5
    if [ "$hsl" -ge "$sn" ]; then
        printf "${RED}Removing oldest $hsv snapshot... $ohs${ALL_OFF}\n"
        btrfs subvolume delete $ohs
    else
        printf "${YELLOW}Not enough $hsv snapshots...${ALL_OFF}\n"
        printf "${YELLOW}No snapshots to delete...${ALL_OFF}\n"
    fi

    printf "\n"
    read -rsn1 -p "Press any key to continue";printf "\n"
}

#=== FUNCTION =================================================================
#        Name: pacman
# Description: this is ran if -p or --pacman is ran
#==============================================================================

pacman() {
    #number of snapshots allowed
    sn=$SNAP_PACMAN

    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root\n" "$SCRIPTNAME"
        exit
    fi

    #root subvolume device
    hsvdvl=1
    while IFS= read -r Line; do
	    if [ -n "$hsvdvl" ]; then
		    unset hsvdvl; continue
	    fi
	    set -- $Line
	    [ "$2" = 'btrfs' ] && [ "${7}" = '/' ] && hsvdv="$1"
    done <<< $( df -Th )

    #current date
    cdt=`date +"%F-%H-%M-%S"`

    #root subvolume
    while IFS= read -r Line; do
	    set -- $Line
	    [ "$7" = '5' ] && [ "$9" = '@' ] && hsv="${@: -1}"
    done <<< $( btrfs subvolume list / )

    #snapshot subvolume
    while IFS= read -r Line; do
	    set -- $Line
	    [ "$7" = '5' ] && [ "$9" = '@snapshots' ] && ssv="${@: -1}"
    done <<< $( btrfs subvolume list / )

    #number of root snapshots
    hsl=0
    while IFS= read -r Line; do
	    LastColumn=${Line##* }
	    [ "${LastColumn:0:23}" = '@snapshots/@root-pacman' ] && hsl=$((hsl+1))
    done <<< $( btrfs subvolume list / )

    #oldest root snapshot
    while IFS= read -r Line; do
	    LastColumn=${Line##* }
	    [ "${LastColumn:0:23}" = '@snapshots/@root-pacman' ] && ohs="$LastColumn" && break
    done <<< $( btrfs subvolume list / )

    #Mount root subvolume to /mnt/750GB/.snapshots
    mnt='/mnt/750GB/.snapshots'

    if [ -e "$hsvdv" ]; then
        if [ -d "$mnt" ]; then
            printf "${YELLOW}Mounted $hsvdv to $mnt${ALL_OFF}\n"
        else
            printf "${RED}No btrfs drives found${ALL_OFF}\n"
            exit 1
        fi
    else
        printf "${RED}No btrfs drives found${ALL_OFF}\n"
        exit 1
    fi

    #MUST be in /mnt to perform task
    cd $mnt


    # Check root subvolume exists...
    if [ -e "$hsv" ]; then
        printf "${GREEN}Found root subvolume... $hsv${ALL_OFF}\n"
    else
        printf "${RED}No root subvolume found... exiting${ALL_OFF}\n"
        exit 1
    fi

    # check snapshot subvolume exists...
    if [ -e "$ssv" ]; then
        printf "${GREEN}Found snapshot suvolume... $ssv${ALL_OFF}\n"
    else
        printf "${RED}No snapshot subvolume found${ALL_OFF}\n"

        exit 1
    fi

    #Make snapshot and place in snapshot directory
    btrfs subvolume snapshot $hsv $ssv/@root-pacman-$cdt

    #remove a root snapshot if there are more than 5
    if [ "$hsl" -ge "$sn" ]; then
        printf "${RED}Removing oldest $hsv snapshot... $ohs${ALL_OFF}\n"
        btrfs subvolume delete $ohs
    else
        printf "${YELLOW}Not enough $hsv snapshots...${ALL_OFF}\n"
        printf "${YELLOW}No snapshots to delete...${ALL_OFF}\n"
    fi

    printf "\n"
    read -rsn1 -p "Press any key to continue";printf "\n"
}

#=== FUNCTION =================================================================
#        Name: version
# Description: Prints version information
#==============================================================================

version() {
    printf "
        %s v%s - %s

        This program may be freely redistributed under
        the terms of the GNU General Public License v3.0.
        %s
    \n" "$SCRIPTNAME" "$VERSION" "$DESCRIPTION" "$AUTHOR"
    exit
}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage
#==============================================================================

usage() {

    printf "
    Snapshot the @ and @root btrfs subvolumes.
    Usage:
      %s...
      %s [options]...
    Options:
      -h, --help            Display help.
      -v, --version         Print version information and exits.
      -p, --pacman          Exec the scripts with the pacman hook.
      \n" "$SCRIPTNAME" "$SCRIPTNAME"
}

while true; do
    case $1 in
        -h|--help|-\?)
            usage
            exit 0
            ;;
        -v|--version)
            version
            exit 0
            ;;
        -p|--pacman)
            pacman
            exit 0
            ;;
        --)
            shift
            break
            ;;
        -*)
            error "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            main
            break
            ;;
    esac
done
