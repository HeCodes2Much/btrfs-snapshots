#!/usr/bin/env bash
## Script metadata
SCRIPTNAME=${0##*/}
VERSION="2021.09.19"
DESCRIPTION="A bach BTRFS Sanpshot wrapper"
AUTHOR="The-Repo-Club <wayne6324@gmail.com>"

## Set Colors (copied from makepkg)
ALL_OFF="\e[1;0m"
RED="\e[1;31m"
GREEN="\e[1;32m"
YELLOW="\e[1;33m"
BLUE="\e[1;34m"
PURPLE="\e[1:35m"
CYAN="\e[1:36m"

readonly ALL_OFF RED GREEN YELLOW BLUE PURPLE CYAN

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
error() {
    local mesg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF}${BOLD} %s${ALL_OFF}\n" "$mesg" "$@" >&2
}

#=== FUNCTION =================================================================
#        Name: main
# Description: The main function if nothing is passed
#==============================================================================

main() {
    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root${ALL_OFF}\n" "$SCRIPTNAME"
        exit
    fi


    if ! command -v snaphome &> /dev/null; then
        printf ${RED}"snaphome could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running snaphome.${ALL_OFF}\n"
        snaphome
    fi

    if ! command -v snaproot &> /dev/null; then
        printf ${RED}"snaproot could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running snaproot.${ALL_OFF}\n"
        snaproot
    fi

    if ! command -v grub-mkconfig &> /dev/null; then
        printf ${RED}"grub-mkconfig could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running grub-mkconfig.${ALL_OFF}\n"
        grub-mkconfig -o /boot/grub/grub.cfg
    fi

    printf "\n"
    read -rsn1 -p"Press any key to continue";echo
}

#=== FUNCTION =================================================================
#        Name: home_only
# Description: The home script only
#==============================================================================

home_only() {
    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root${ALL_OFF}\n" "$SCRIPTNAME"
        exit
    fi


    if ! command -v snaphome &> /dev/null; then
        printf ${RED}"snaphome could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running snaphome.${ALL_OFF}\n"
        snaphome
    fi

    if ! command -v grub-mkconfig &> /dev/null; then
        printf ${RED}"grub-mkconfig could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running grub-mkconfig.${ALL_OFF}\n"
        grub-mkconfig -o /boot/grub/grub.cfg
    fi

    printf "\n"
    read -rsn1 -p"Press any key to continue";echo
}

#=== FUNCTION =================================================================
#        Name: root_only
# Description: The root script only
#==============================================================================

root_only() {
    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root${ALL_OFF}\n" "$SCRIPTNAME"
        exit
    fi


    if ! command -v snaproot &> /dev/null; then
        printf ${RED}"snaproot could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running snaproot.${ALL_OFF}\n"
        snaproot
    fi

    if ! command -v grub-mkconfig &> /dev/null; then
        printf ${RED}"grub-mkconfig could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running grub-mkconfig.${ALL_OFF}\n"
        grub-mkconfig -o /boot/grub/grub.cfg
    fi

    printf "\n"
    read -rsn1 -p"Press any key to continue";echo
}

#=== FUNCTION =================================================================
#        Name: pacman
# Description: this is ran if -p or --pacman is ran
#==============================================================================

pacman() {
    runas=$(whoami)

    if [ $runas != 'root' ]; then
        printf ${GREEN}"%s ${RED}command must be ran as root${ALL_OFF}\n" "$SCRIPTNAME"
        exit
    fi


    if ! command -v snaphome &> /dev/null; then
        printf ${RED}"snaphome could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running pacman hook snaphome.${ALL_OFF}\n"
        snaphome --pacman
    fi

    if ! command -v snaproot &> /dev/null; then
        printf ${RED}"snaproot could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running pacman hook snaproot.${ALL_OFF}\n"
        snaproot --pacman
    fi

    if ! command -v grub-mkconfig &> /dev/null; then
        printf ${RED}"grub-mkconfig could not be found${ALL_OFF}\n"
        exit
    else
        printf ${GREEN}"running pacman hook grub-mkconfig.${ALL_OFF}\n"
        grub-mkconfig -o /boot/grub/grub.cfg
    fi

    printf "\n"
    read -rsn1 -p"Press any key to continue";echo
}

#=== FUNCTION =================================================================
#        Name: version
# Description: Prints version information
#==============================================================================

version() {
    printf "
        %s v%s - %s

        This program may be freely redistributed under
        the terms of the GNU General Public License v3.0.
        %s
    \n" "$SCRIPTNAME" "$VERSION" "$DESCRIPTION" "$AUTHOR"
    exit
}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage
#==============================================================================

usage() {

    printf "
    Snapshot the @ and @home btrfs subvolumes.
    Usage:
      %s...
      %s [options]...
    Options:
      -h, --help            Display help.
      -v, --version         Print version information and exits.
      -p, --pacman          Exec the scripts with the pacman hook.
      --home                Exec the script home script only.
      --root                Exec the script root script only.
      \n" "$SCRIPTNAME" "$SCRIPTNAME"
}

while true; do
    case $1 in
        -h|--help|-\?)
            usage
            exit 0
            ;;
        -v|--version)
            version
            exit 0
            ;;
        -p|--pacman)
            pacman
            exit 0
            ;;
        --home)
            home_only
            exit 0
            ;;
        --root)
            root_only
            exit 0
            ;;
        --)
            shift
            break
            ;;
        -*)
            error "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            main
            break
            ;;
    esac
done
